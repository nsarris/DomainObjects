<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var numOfGenericParameters = 16; #>
using System;
using DomainObjects.Internal;
using Dynamix.Reflection;

namespace DomainObjects.Core
{
<# for (var i = 2; i <= numOfGenericParameters; i++) { 
	var generics = string.Join(", ",Enumerable.Range(1, i).Select(x => "TArg" + x));
#>	public class DomainEntityFactory<T, <#= generics #>> 
		: TypeConstructor<T, <#= generics #>>
        where T : DomainEntity
    {
        public TypeConstructor<T, <#= generics #>> New { get; }
        public TypeConstructor<T, <#= generics #>> Existing { get; }

        public DomainEntityFactory(Action<T> initializer = null)
        {
            var concreteType = ProxyTypeBuilder.BuildPropertyChangedProxy<T>();
            New = new TypeConstructor<T, <#= generics #>>(concreteType, x => { initializer?.Invoke(x); x.OnCreated(); });
            Existing = new TypeConstructor<T, <#= generics #>>(concreteType, x => { initializer?.Invoke(x); x.OnLoaded(); });
        }
    }

<# } #>
}